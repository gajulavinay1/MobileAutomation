<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="8" ignored="0" total="8" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="1039636" started-at="2020-09-23T15:47:42 IST" finished-at="2020-09-23T16:05:02 IST">
    <groups>
    </groups>
    <test name="Default test" duration-ms="1039636" started-at="2020-09-23T15:47:42 IST" finished-at="2020-09-23T16:05:02 IST">
      <class name="testsuite.Scripts.CoronaRakshak">
        <test-method status="PASS" signature="setupSuite(org.testng.ITestContext)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setupSuite" is-config="true" duration-ms="20725" started-at="2020-09-23T15:47:22 IST" finished-at="2020-09-23T15:47:42 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@2b61a019]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSuite -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="6" started-at="2020-09-23T15:47:46 IST" finished-at="2020-09-23T15:47:46 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="827496" started-at="2020-09-23T15:47:46 IST" data-provider="getTestData" finished-at="2020-09-23T16:01:33 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=Myself, Selecttheproduct=Corona Rakshak, userpass=Sangeetha$1, useremail=sangeethanulu@gmail.com, pin=500072, nomineename=ghyfsdf, nomineeage=38, CoverageAmount=1 Lakh, weight=62, pincode=500072, height=169, policyperiod=3.5 months, addresstwo=hyderabad, relationship2=DEPENDANT CHILDREN, relationship1=SELF, aadhar=1254, income=600000, Age=56, perofclaim=100, GSTidnumber=22AAAAA0000A1Z5, yearsormonths=Year(s), name=sathvik, addressone=kphb}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Step Star cororna rakshak ProductEndtoEnd Scenario Failed with description Failed with  expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Step Star cororna rakshak ProductEndtoEnd Scenario Failed with description Failed with  expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at support.HtmlReportSupport.onFailure(HtmlReportSupport.java:779)
at support.Reporter.failureReport(Reporter.java:91)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="6" started-at="2020-09-23T16:01:33 IST" finished-at="2020-09-23T16:01:33 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="23" started-at="2020-09-23T16:01:33 IST" finished-at="2020-09-23T16:01:33 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="207965" started-at="2020-09-23T16:01:33 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:01 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=, addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="1" started-at="2020-09-23T16:05:01 IST" finished-at="2020-09-23T16:05:01 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="20" started-at="2020-09-23T16:05:01 IST" finished-at="2020-09-23T16:05:01 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="84" started-at="2020-09-23T16:05:01 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:01 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=, addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="2" started-at="2020-09-23T16:05:01 IST" finished-at="2020-09-23T16:05:01 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="2" started-at="2020-09-23T16:05:01 IST" finished-at="2020-09-23T16:05:01 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="143" started-at="2020-09-23T16:05:01 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=, addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="1" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="2" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="103" started-at="2020-09-23T16:05:02 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=, addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="1" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="3" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="121" started-at="2020-09-23T16:05:02 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=, addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="2" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="2" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="72" started-at="2020-09-23T16:05:02 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=, addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.GeneratedConstructorAccessor33.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="1" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="setBrowerDriver(java.lang.reflect.Method)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="setBrowerDriver" is-config="true" duration-ms="3" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testsuite.Scripts.CoronaRakshak.productCoronaRakshak(java.util.Hashtable) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBrowerDriver -->
        <test-method status="FAIL" signature="productCoronaRakshak(java.util.Hashtable)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="productCoronaRakshak" duration-ms="64" started-at="2020-09-23T16:05:02 IST" data-provider="getTestData" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{selectwhomtoinsure=, Selecttheproduct=, userpass=, useremail=, pin=, nomineename=, nomineeage=, CoverageAmount=, weight=, pincode=, height=, policyperiod=, addresstwo=, relationship2=, relationship1=, aadhar=, income=, Age=, perofclaim=, GSTidnumber=, yearsormonths=, name=adbExecTimeout: "50000", addressone=}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'NBLAP195', ip: '172.27.196.209', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: io.appium.java_client.android.AndroidDriver
Capabilities {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, databaseEnabled: false, desired: {app: E:\StarHealthMobileAutomati..., appActivity: com.star.customer_app.MainA..., appPackage: com.star.customer_app, deviceName: Pixel XL API 27, platformName: android, platformVersion: 8.1.0}, deviceApiLevel: 27, deviceManufacturer: Google, deviceModel: Android SDK built for x86, deviceName: emulator-5554, deviceScreenDensity: 560, deviceScreenSize: 1440x2560, deviceUDID: emulator-5554, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 3.5, platform: LINUX, platformName: Android, platformVersion: 8.1.0, statBarHeight: 84, takesScreenshot: true, viewportRect: {height: 2308, left: 0, top: 84, width: 1440}, warnings: {}, webStorageEnabled: false}
Session ID: fad2d702-996e-462d-ad82-5d617148af03
at sun.reflect.GeneratedConstructorAccessor33.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:239)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)
at accelerators.ActionEngine.screenShot(ActionEngine.java:127)
at support.Reporter.failureReport(Reporter.java:87)
at testsuite.Scripts.CoronaRakshak.productCoronaRakshak(CoronaRakshak.java:64)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productCoronaRakshak -->
        <test-method status="PASS" signature="tearDownMethod()[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDownMethod" is-config="true" duration-ms="1" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestContext)[pri:0, instance:testsuite.Scripts.CoronaRakshak@df27fae]" name="tearDown" is-config="true" duration-ms="5" started-at="2020-09-23T16:05:02 IST" finished-at="2020-09-23T16:05:02 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@2b61a019]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testsuite.Scripts.CoronaRakshak -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
